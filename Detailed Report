Detailed Report on Arduino/ NodeMCU - based  Water Pump Control System
1. Introduction
This project demonstrates how to control a water pump using an Arduino/NodeMCU and a relay module through a web interface. The water pump can be turned on and off remotely via a web browser on your smartphone or computer.
2. Components Required
2.1. Hardware
NodeMCU (ESP8266)
Relay Module (1-channel)
DC Water Pump
Jumper Wires
Breadboard (optional)
Power Supply for the Pump (appropriate voltage and current rating)
USB Cable for NodeMCU
Wi-Fi Router
2.2. Software
Arduino IDE (download from Arduino's official website)
ESP8266 Board Manager
3. Construction
3.1. Hardware Connections
3.1.1. Connecting the Relay to the NodeMCU
Relay Module Pins:
VCC: Connect to the 3.3V pin on the NodeMCU.
GND: Connect to the GND pin on the NodeMCU.
IN: Connect to the digital pin D1 (GPIO5) on the NodeMCU.
Relay Module to Pump:
COM (Common): Connect to one terminal of the pump.
NO (Normally Open): Connect to the positive terminal of the pump's power supply.
GND of Pump's Power Supply: Connect to the other terminal of the pump.
3.2. Software Setup
3.2.1. Arduino IDE
Install the Arduino IDE:
Download and install the Arduino IDE from Arduino's official website.
Install Libraries for NodeMCU:
Open the Arduino IDE.
Go to File > Preferences.
In the "Additional Board Manager URLs" field, enter: http://arduino.esp8266.com/stable/package_esp8266com_index.json
Go to Tools > Board > Boards Manager, search for esp8266 and install it.
4. Full Code
NodeMCU Code
This code will control the water pump using a web interface hosted on the NodeMCU:
cpp
Copy code
#include <ESP8266WiFi.h>

// Replace these with your Wi-Fi credentials
const char* ssid = "IDEALAB";
const char* password = "AIDL@123";

// Create a Wi-Fi server on port 80
WiFiServer server(80);

#define RELAY_PIN D1 // Relay connected to D1 (GPIO5)

void setup() {
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, HIGH); // Ensure relay is off initially (active low)

  Serial.begin(115200);
  delay(10);

  // Debug message
  Serial.println();
  Serial.println("NodeMCU is starting up...");
  Serial.println("Relay is initially OFF");

  // Connect to Wi-Fi
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  // Start the server
  server.begin();
  Serial.println("Server started");

  // Manual relay test instructions
  Serial.println("Type 'on' to turn the relay ON and 'off' to turn the relay OFF");
}

void loop() {
  // Listen for incoming clients
  WiFiClient client = server.available();

  if (client) {
    Serial.println("New Client.");
    String currentLine = ""; // make a String to hold incoming data from the client

    while (client.connected()) {
      if (client.available()) { // if there's bytes to read from the client
        char c = client.read(); // read a byte
        Serial.write(c); // print it out the serial monitor
        if (c == '\n') { // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers have been sent, now respond with the webpage content
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();

            // the content of the HTTP response follows the header:
            client.print("<!DOCTYPE html><html>");
            client.print("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.print("<style>");
            client.print("body { font-family: Arial, sans-serif; text-align: center; background-color: #f0f0f0; }");
            client.print(".button { display: inline-block; padding: 10px 20px; font-size: 20px; cursor: pointer; text-align: center; text-decoration: none; outline: none; color: #fff; background-color: #4CAF50; border: none; border-radius: 15px; box-shadow: 0 5px #999; }");
            client.print(".button:hover { background-color: #3e8e41 }");
            client.print(".button:active { background-color: #3e8e41; box-shadow: 0 2px #666; transform: translateY(4px); }");
            client.print("</style></head>");
            client.print("<body><h1>Smart Pump Controller</h1>");
            client.print("<p>Click below to button to On / Off the motor pump</p>");
            client.print("<p><a href=\"/on\" class=\"button\">Turn ON</a></p>");
            client.print("<p><a href=\"/off\" class=\"button\">Turn OFF</a></p>");
            client.print("</body></html>");

            // The HTTP response ends with another blank line
            client.println();
            break;
          } else {
            // Clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {
          // Add every character to the currentLine string
          currentLine += c;
        }

        // Check if the currentLine ends with "GET /on"
        if (currentLine.endsWith("GET /on")) {
          digitalWrite(RELAY_PIN, HIGH); // Turn the pump on
          Serial.println("Relay ON");
        }
        // Check if the currentLine ends with "GET /off"
        if (currentLine.endsWith("GET /off")) {
          digitalWrite(RELAY_PIN, LOW); // Turn the pump off
          Serial.println("Relay OFF");
        }
      }
    }
    // close the connection:
    client.stop();
    Serial.println("Client Disconnected.");
  }

  // Manual relay control via Serial Monitor
  if (Serial.available()) {
    String command = Serial.readStringUntil('\n');
    command.trim(); // Remove any trailing newline characters

    if (command == "on") {
      digitalWrite(RELAY_PIN, LOW);
      Serial.println("Manual Relay ON");
    } else if (command == "off") {
      digitalWrite(RELAY_PIN, HIGH);
      Serial.println("Manual Relay OFF");
    } else {
      Serial.println("Invalid command. Type 'on' or 'off'");
    }
  }
}
5. Installation and Testing
5.1. Uploading the Code
Connect your NodeMCU to your computer using a USB cable.
Open the Arduino IDE.
Copy the code above into the Arduino IDE.
Select the NodeMCU board:
Go to Tools > Board > NodeMCU 1.0 (ESP-12E Module).
Select the correct port under Tools > Port.
Click on the Upload button to upload the code to your NodeMCU.
5.2. Testing the Relay and Pump
Ensure all connections are secure and correct.
After uploading the code, open the Serial Monitor in the Arduino IDE to see the debug messages.
Open a web browser and enter the IP address displayed in the Serial Monitor to access the web interface.
Click on the "Turn ON" and "Turn OFF" buttons to control the pump.
5.3. Troubleshooting
If the pump does not start:
Check the relay connections.
Ensure the relay is connected to the correct digital pin.
Check the power supply to the pump.
Ensure the web interface is correctly showing the "ON" and "OFF" options.
If the webpage does not load:
Verify the IP address of the NodeMCU.
Ensure your computer and NodeMCU are connected to the same network.
6. Application
This project can be used in various applications where remote control of a water pump is required. Some potential applications include:
Irrigation Systems: Automatically control water flow in agricultural fields.
Aquarium Systems: Control water pumps in aquariums for filtration and water circulation.
Home Automation: Integrate with smart home systems to control garden sprinklers or other water-based appliances.
